package milanes;
import java.util.ArrayDeque;
import java.util.Scanner;

class Container {
    String id;
    String description;
    int weight;

    public Container(String id, String description, int weight) {
        this.id = id;
        this.description = description;
        this.weight = weight;
    }

    @Override
    public String toString() {
        return id + " | " + description + " | " + weight + "kg";
    }
}

class Ship {
    String name;
    String captain;

    public Ship(String name, String captain) {
        this.name = name;
        this.captain = captain;
    }

    @Override
    public String toString() {
        return name + " | Capt. " + captain;
    }
}

public class  {

    static ArrayDeque<Container> containerStack = new ArrayDeque<>();
    static ArrayDeque<Ship> shipQueue = new ArrayDeque<>();

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int choice;

        do {
            displayMenu();
            choice = scanner.nextInt();
            scanner.nextLine(); 
            switch (choice) {
                case 1:
                    storeContainer(scanner);
                    break;
                case 2:
                    viewPortContainers();
                    break;
                case 3:
                    registerArrivingShip(scanner);
                    break;
                case 4:
                    viewWaitingShips();
                    break;
                case 5:
                    loadNextShip();
                    break;
                case 0:
                    System.out.println("Exiting program.");
                    break;
                default:
                    System.out.println("Invalid choice, try again.");
            }
        } while (choice != 0);
    }

    private static void displayMenu() {
        System.out.println("\n=== Port Container Management System ===");
        System.out.println("[1] Store container (push)");
        System.out.println("[2] View port containers");
        System.out.println("[3] Register arriving ship (enqueue)");
        System.out.println("[4] View waiting ships");
        System.out.println("[5] Load next ship (pop container + poll ship)");
        System.out.println("[0] Exit");
        System.out.print("Choose an option: ");
    }

    private static void storeContainer(Scanner scanner) {
        System.out.print("Enter container ID: ");
        String id = scanner.nextLine();
        System.out.print("Enter container description: ");
        String description = scanner.nextLine();
        System.out.print("Enter container weight (kg): ");
        int weight = scanner.nextInt();
        scanner.nextLine(); 
        Container container = new Container(id, description, weight);
        containerStack.push(container);
        System.out.println("Stored: " + container);
    }

    private static void viewPortContainers() {
        if (containerStack.isEmpty()) {
            System.out.println("No containers at the port.");
        } else {
            System.out.println("TOP →");
            for (Container container : containerStack) {
                System.out.println(container);
            }
            System.out.println("← BOTTOM");
        }
    }

    private static void registerArrivingShip(Scanner scanner) {
        System.out.print("Enter ship name: ");
        String name = scanner.nextLine();
        System.out.print("Enter ship captain: ");
        String captain = scanner.nextLine();

        Ship ship = new Ship(name, captain);
        shipQueue.offer(ship);
        System.out.println("Registered: " + ship);
    }

    private static void viewWaitingShips() {
        if (shipQueue.isEmpty()) {
            System.out.println("No ships waiting.");
        } else {
            System.out.println("FRONT →");
            for (Ship ship : shipQueue) {
                System.out.println(ship);
            }
            System.out.println("← REAR");
        }
    }

    private static void loadNextShip() {
        if (containerStack.isEmpty()) {
            System.out.println("No containers to load.");
        } else if (shipQueue.isEmpty()) {
            System.out.println("No ships waiting to be loaded.");
        } else {
            Container container = containerStack.pop();
            Ship ship = shipQueue.poll();
            System.out.println("Loaded: " + container + " → " + ship);
            System.out.println("Remaining containers: " + containerStack.size());
            System.out.println("Remaining ships waiting: " + shipQueue.size());
        }
    }
}
